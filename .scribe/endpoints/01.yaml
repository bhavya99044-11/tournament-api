name: Tournament-data
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/tournament
    metadata:
      groupName: Tournament-data
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Tournament data with query params'
      description: 'Get all Tournament related data in this pass query according to your selection'
      authenticated: false
      custom: []
    headers:
      Authorization: "'Bearer token'"
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      isPlayer:
        name: isPlayer
        description: 'To get player related tournament data.'
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      search:
        name: search
        description: 'To get user specific tournament data'
        required: false
        example: sint
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'status(past,active,upcoming)':
        name: 'status(past,active,upcoming)'
        description: 'To get the tournament data .'
        required: false
        example: past
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'To get data rows per page.'
        required: false
        example: '2'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      offset:
        name: offset
        description: 'To get data from selected page'
        required: false
        example: est
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanQueryParameters:
      isPlayer: false
      search: sint
      'status(past,active,upcoming)': past
      per_page: '2'
      offset: est
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "status":true,
          "data":[
               {
                  "id":1,
                  "name":"ipl20",
                  "location":"gujarat"
               }
             ],
          "meta":
              {
                "perPage": 10,
                "currentPage": 1,
                "totalPages": 4,
                "total": 32,
                "firstItem": 1,
                "lastItem": 10
              }
          }
        headers: []
        description: 'success token'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/tournament/search
    metadata:
      groupName: Tournament-data
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Search box suggestion'
      description: 'For app search box suggestion in this top 5 related tournament data with id will be given'
      authenticated: false
      custom: []
    headers:
      Authorization: "'Bearer token'"
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      search:
        name: search
        description: 'To search specific tournament'
        required: false
        example: tempore
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanQueryParameters:
      search: tempore
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "status":true,
          "data":[
               {
                  "id":1,
                  "name":"ipl20",
                  "location":"gujarat"
               }
             ]
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/tournament/{tournament}/matches'
    metadata:
      groupName: Tournament-data
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Tournament matches with rounds'
      description: 'To get the selected tournament matches with rounds'
      authenticated: false
      custom: []
    headers:
      Authorization: "'Bearer token'"
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      tournament:
        name: tournament
        description: 'Pass tournament id in this.'
        required: false
        example: '2'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      tournament: '2'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      round:
        name: round
        description: 'Pass round number in this to get selected round data.'
        required: false
        example: 8
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      round: 8
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "status":true,
          "data":[
              {
                 id:100,
                 winner_team_id:100,
                 home_team:{
                     id:100,
                     name:inpl40
                  }
                 opponent_team:{
                      id:30,
                      name:ww50
                  }
                  won_team:{
                      id:30,
                      name:ww50
                  }
              }
            ]
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: |-
          {
          "status":false,
          "message":"This round is not available in the tournament"
          }
        headers: []
        description: 'No data found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
