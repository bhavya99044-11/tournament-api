name: Authentication
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/register
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User register'
      description: 'For new user registration in app'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: rae56@example.net
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'The length of this field minimum 8.'
        required: true
        example: '12345678'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      name:
        name: name
        description: 'The name of the user.'
        required: false
        example: panthil
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: rae56@example.net
      password: '12345678'
      name: panthil
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status":true,
            "message":"User registered succesfully"
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: |-
          {
            "status":false,
            "errors":{
            "email":[
                "The email field is invalid"
              ]
            },
            "message":"Validation errors"
            }
        headers: []
        description: 'invalid data field'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/login
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User Login'
      description: 'This endpoint is used to user login'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: paucek.felicita@example.org
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'The length of this field minimum 8.'
        required: true
        example: '12345678'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: paucek.felicita@example.org
      password: '12345678'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status":true,
            "data":
               [
                   "token"=>"dasfsdafgsGSDFGRS",
               ]
          }
        headers: []
        description: 'success token'
        custom: []
      -
        status: 422
        content: |-
          {
            "status":false,
            "errors":{
            "email":[
                "The email field is invalid"
              ]
            },
            "message":"Validation errors"
            }
        headers: []
        description: 'invalid data field'
        custom: []
      -
        status: 429
        content: |-
          {
          "status":false,
          "message":"too many attempts"

          }
        headers: []
        description: 'too many attempts'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/logout
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User logout api'
      description: 'User logout for this user must be logged in otherwise it will return error'
      authenticated: false
      custom: []
    headers:
      Authorization: "'Bearer token'"
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"status":true, "message":"User logged out successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: '{"status":false, "message":"unauthorized"}'
        headers: []
        description: unauthorized
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
